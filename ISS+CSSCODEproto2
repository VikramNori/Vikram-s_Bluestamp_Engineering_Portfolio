import time
import math
import board
from os import getenv
import displayio
from terminalio import FONT
from adafruit_pyportal import PyPortal
from adafruit_display_shapes.circle import Circle
from adafruit_display_text.label import Label

# CSS Line
MARK_SIZE = 10
MARK_COLOR = 0x4B6043
MARK_THICKNESS = 5
TRAIL_LENGTH = 75
TRAIL_COLOR = 0xFFFF00
DATE_COLOR = 0x111111
TIME_COLOR = 0x111111
LAT_MAX = 80
UPDATE_RATE = 10

#ISS Line
MARK_SIZE = 10
MARK_COLOR = 0xFF3030
MARK_THICKNESS = 5
TRAIL_LENGTH = 75
TRAIL_COLOR = 0xFFFF00
DATE_COLOR = 0x111111
TIME_COLOR = 0x111111
LAT_MAX = 80
UPDATE_RATE = 10

#CSS startup
api_key = getenv("CIRCUITPY_N2YO_API_KEY")
if not api_key:
    raise ValueError("API key not found! Check your settings.toml file.")

observer_lat = 37.3393     # Example: San Francisco
observer_lon = -121.8949
observer_alt = 0           # Altitude in meters


pyportal = PyPortal(
    status_neopixel=board.NEOPIXEL,
    text_font=None,
    default_bg="/map.bmp"
)

# Fetch CSS data
css_url = "https://api.n2yo.com/rest/v1/satellite/positions/48274/37.3/-121.8/0/1?apiKey=ABC123"
css_json_path = ["positions", 0]
css_data = pyportal.fetch(css_url, css_json_path)
print("Fetching CSS Tianhe position from:", css_url)
# Fetch ISS data
iss_url = "http://api.open-notify.org/iss-now.json"
iss_json_path = ["iss_position"]
iss_data = pyportal.fetch(iss_url, iss_json_path)
print("Fetching ISS position from:", iss_url)
# ISS Startup

WIDTH = board.DISPLAY.width
HEIGHT = board.DISPLAY.height
# (MUTUAL) Connect to the internet and get local time
pyportal.get_local_time()

# CSS Labels
lat_labella = Label(FONT, text="Lat_of_CSS: ---", color=0xFFFFFF, x=10, y=40)
lon_labella = Label(FONT, text="Lon_of_CSS: ---", color=0xFFFFFF, x=10, y=70)
board.DISPLAY.auto_refresh = True
pyportal.splash.append(lat_labella)
pyportal.splash.append(lon_labella)

# ISS Labels
lat_label = Label(FONT, text=f"Lat_of_ISS: ---", color=0xFFFFFF, x=200, y=40)
lon_label = Label(FONT, text=f"Lon_of_ISS: ---", color=0xFFFFFF, x=200, y=70)
pyportal.splash.append(lat_label)
pyportal.splash.append(lon_label)

# Mutual Labels
date_label = Label(FONT, text="0000-00-00", color=DATE_COLOR, x=165, y=223)
time_label = Label(FONT, text="00:00:00", color=TIME_COLOR, x=240, y=223)
pyportal.splash.append(date_label)
pyportal.splash.append(time_label)

# ISS trail
trail_bitmap = displayio.Bitmap(3, 3, 1)
trail_palette = displayio.Palette(1)
trail_palette[0] = TRAIL_COLOR
trail = displayio.Group()
pyportal.splash.append(trail)

# CSS Location marker
def get_css_location(width=WIDTH, height=HEIGHT):
    """Fetch current lat/lon, convert to (x, y) tuple scaled to width/height."""
    location = css_data  # use the already fetched css_data
    if not location:
        return None, None, None, None
    '''
    # Get location
    try:
        location = pyportal.fetch()
    except RuntimeError:
        return None, None
'''
    # Compute (x, y) coordinates
    lat = float(location["satlatitude"])   # degrees, -90 to 90
    lon = float(location["satlongitude"])  # degrees, -180 to 180

    # Scale latitude for cropped map
    lat *= 90 / LAT_MAX

    # Mercator projection math
    # https://stackoverflow.com/a/14457180
    # https://en.wikipedia.org/wiki/Mercator_projection#Alternative_expressions
    x = lon + 180
    x = width * x / 360

    y = math.radians(lat)
    y = math.tan(math.pi / 4 + y / 2)
    y = math.log(y)
    y = (width * y) / (2 * math.pi)
    y = height / 2 - y

    return int(x), int(y), float(lat), float(lon)

# ISS location marker
marker = displayio.Group()
for r in range(MARK_SIZE - MARK_THICKNESS, MARK_SIZE):
    marker.append(Circle(0, 0, r, outline=MARK_COLOR))
pyportal.splash.append(marker)

def get_iss_location(width=WIDTH, height=HEIGHT):
    """Fetch current lat/lon, convert to (x, y) tuple scaled to width/height."""

    location = iss_data  # use the already fetched css_data
    if not location:
        return None, None, None, None
    # Compute (x, y) coordinates
    lat = float(location["latitude"])   # degrees, -90 to 90
    lon = float(location["longitude"])  # degrees, -180 to 180
    # Scale latitude for cropped map
    lat *= 90 / LAT_MAX

    # Mercator projection math
    # https://stackoverflow.com/a/14457180
    # https://en.wikipedia.org/wiki/Mercator_projection#Alternative_expressions
    x = lon + 180
    x = width * x / 360

    y = math.radians(lat)
    y = math.tan(math.pi / 4 + y / 2)
    y = math.log(y)
    y = (width * y) / (2 * math.pi)
    y = height / 2 - y
    return int(x), int(y), float(lat), float(lon)

    try:
        board.DISPLAY.refresh(target_frames_per_second=60)
    except AttributeError:
        board.DISPLAY.refresh_soon()


def update_display(current_time, update_iss=False,  update_css=False):
    """Update the display with current info."""
    if update_iss:
        result = get_location()
    if result and len(result) == 4:
            x, y, lat, lon = result
            if x is not None and y is not None:
                marker.x = x
                marker.y = y
                if len(trail) >= TRAIL_LENGTH:
                    trail.pop(0)
                trail.append(displayio.TileGrid(trail_bitmap,
                                                pixel_shader=trail_palette,
                                                x = x - 1,
                                                y = y - 1) )
            # Safe coordinate formatting
            if isinstance(lat, float) and isinstance(lon, float):
                lat_label.text = "Lat_of_CSS: {:.2f}".format(lat)
                lon_label.text = "Lon_of_CSS: {:.2f}".format(lon)

    date_label.text = "{:04}-{:02}-{:02}".format(current_time.tm_year,
                                                 current_time.tm_mon,
                                                 current_time.tm_mday)
    time_label.text = "{:02}:{:02}:{:02}".format(current_time.tm_hour,
                                                 current_time.tm_min,
                                                 current_time.tm_sec)
    # ISS location
    if update_iss:
        result = get_location()
        if result and len(result) == 4:
            x, y, lat, lon = result
            if x is not None and y is not None:
                marker.x = x
                marker.y = y
                if len(trail) >= TRAIL_LENGTH:
                    trail.pop(0)
                trail.append(displayio.TileGrid(trail_bitmap,
                                                pixel_shader=trail_palette,
                                                x = x - 1,
                                                y = y - 1) )
            # Safe coordinate formatting
            if isinstance(lat, float) and isinstance(lon, float):
                lat_label.text = "Lat_of_ISS: {:.2f}".format(lat)
                lon_label.text = "Lon_of_ISS: {:.2f}".format(lon)

    date_label.text = "{:04}-{:02}-{:02}".format(current_time.tm_year,
                                                 current_time.tm_mon,
                                                 current_time.tm_mday)
    time_label.text = "{:02}:{:02}:{:02}".format(current_time.tm_hour,
                                                 current_time.tm_min,
                                                 current_time.tm_sec)

    try:
        board.DISPLAY.refresh(target_frames_per_second=60)
    except AttributeError:
        board.DISPLAY.refresh_soon()
def update_display(current_time, update_iss=False):
    """Update the display with current info."""

    # ISS location
    if update_iss:
        result = get_location()
        if result and len(result) == 4:
            x, y, lat, lon = result
            if x is not None and y is not None:
                marker.x = x
                marker.y = y
                if len(trail) >= TRAIL_LENGTH:
                    trail.pop(0)
                trail.append(displayio.TileGrid(trail_bitmap,
                                                pixel_shader=trail_palette,
                                                x = x - 1,
                                                y = y - 1) )
            # Safe coordinate formatting
            if isinstance(lat, float) and isinstance(lon, float):
                lat_label.text = "Lat_of_ISS: {:.2f}".format(lat)
                lon_label.text = "Lon_of_ISS: {:.2f}".format(lon)
    date_label.text = "{:04}-{:02}-{:02}".format(current_time.tm_year,
                                                 current_time.tm_mon,
                                                 current_time.tm_mday)
    time_label.text = "{:02}:{:02}:{:02}".format(current_time.tm_hour,
                                                 current_time.tm_min,
                                                 current_time.tm_sec)

    try:
        board.DISPLAY.refresh(target_frames_per_second=60)
    except AttributeError:
        board.DISPLAY.refresh_soon()


update_display(time.localtime(), True)
last_update = time.monotonic()


while True:
    now = time.monotonic()
    new_position = False
    if now - last_update > UPDATE_RATE:
        new_position = True
        last_update = now
    update_display(time.localtime(), new_position)
    time.sleep(0.5)
